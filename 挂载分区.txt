挂载
必须分区: /根分区
	swap 分区（交换分区，内存2倍，不超过2gb）

推荐分区
	/boot(启动分区，200mb
)

linux文件系统结构：
/
    /boot  系统启动目录   一般给的内存不大 
    /etc   配置文件保存目录
	passwd 
	shadow
	group
    /home  


linux 不考扩展名区分文件类型
压缩包：“*.gz” ,“*.bz”,"*.tar.bz2","*.tgz"等
二进制软件包：“rmp”
网页文件：“.html”
脚本文件：“.sh”
配置文件：“*.cofg”
linux所有文件都必须   挂载   后用户才能使用	

linux 各目录的作用：
二进制的可执行文件
/bin/ 存放系统命令的目录，普通用户和超级用户都可以执行   单用户模式下可以执行
/sbin/保存和系统环境设置相关的命令，只有超级用户可以使用进行系统环境设置
/user/bin/ 和bin 不同之处在于  单用户模式下不能执行
/user/sbin/存放跟文件不必要的系统管理命令
/boot/   系统启动目录    ，保存系统启动的相关文件，内核文件
/dev/设备文件保存位置   ，保存所用硬件的设备文件.
/etc/配置文件保存位置     系统内所有采用默认安装方式的服务的配置文件全部保存在这个
目录中，如账号密码，服务启动脚本常用的配置文件
/home/  普通用户的家目录
/lib/  系统调用的函数库保存的位置
/lost+found/
挂载目录
/media/
/mnt/
/mtsc/

第三方软件目录
otp：  现在一般吧第三方软件放在/usr/local/目录中

虚拟文件系统  ***不要往里面写东西
/proc/ 保存在内存中  保存系统的内核，进程，外部设备和网络状态
/sys/  保存在内存中   主要保存内核相关的信息  


/root/超级用户目录  普通用户在/home/ 下 超级用于家目录直接在'/'下
/srv/ 系统中的服务数据目录
/tmp/临时目录   存放临时文件的目录


/usr/ 系统资源目录 
/var/ 动态资源保存目录  如日志 邮件 mysql的默认库等动态文件

文件分为三类：
所用到的文件处理命令  -a查看目录中的所有文件  包括隐藏文件
	      -l查看文件的详细信息.
	      -d 查看指定目录属性   -ld查看了指定目录的详细信息
	      -h人性化显示
	      -i获取目录的id
	 
u所有者，g所有组，o其他人

ls -ld 目录
ls -l 七个组： 文件

文件类型 文件计数  所有者 所有组 文件大小 文件最后修改时间 文件名


目录处理命令：
创建目录mkdir
mkdir -p 递归创建目录   如mkdir tmp/japan/boduo  而用mkdir不能创建
切换目录  cd
显示当前所在的目录  pwd
表示当前目录 ：   .
返回上一级目录：  ..

删除目录(删除空目录)：rmdir

文件复制：cp

		cp -r 复制目录
		cp -p 保持文件的属性
		改名与mv相同
剪切文件：mv 
		mv /a /b 将a 剪切得到b中
		如果要进行改名将是 在b目录底写上新的文件名

rm 删除文件 
		rm -r 删除目录  系统将会询问是否删除此目录
		rm -f 强制删除
		rm -rf删除目录  强制性删除


touch 创建文件 
	如果文件名要加 空格 的话就要加双引号 ""
	如果不加的话 就是相当于创建多个文件

cat 查询文件 
	cat -n 文件内容的行号

tac 反向查询文件  反向显示不支持 -n

more 查询很长的文件  具有分页效果
 	按空格或f   翻页
	按enter   换行
	按q        退出

less 查询长文件 可以向上向下翻页
	u 向上翻页
	上箭头  向上翻页

head -n 行数 文件名   查询前n行的数据
	如果不写  -n 和行数  将会默认前十行

tail 查询文件的后n行数据
	与tail相反
	-f动态显示最后几行

	/关键词  标出 文件的关键字
 		n 下一个关键字所在的位置

链接：  
软连接： 文件类型      可读可写可执行
软连接文件会以 l 开头 表示link  软连接文件的大小很小 （类似于windows的快捷方式）
创建软连接的方式   ln -s 原文件 链接地址    

硬链接 
创建方式   ln 源文件  硬链接名   
和源文件的类型一样  类似于 cp -p 
但是可以和原文件同时更新 


软连接和硬链接的区别：
	1.可以通过 i 节点识别  硬链接与源文件的i节点相同
	2.硬链接不可以跨分区
	3.硬链接 不能针对目录使用
	4.硬链接 是cp -p + 同步更新


文件权限管理
x可执行  1
w可写    2
r可读    4
chmod  改变文件的权限   chmod xwr（数字）文件名
	可以通过加减等号的操作进行更改
		如：chmod u/g/o+权限(rwx) 文件名 给用户加权限
		    chmod u/g/o-权限  ........   给用户减权限
		    chmod u/g/o=.................直接给用户赋值权限
	可以通过数字的形式给用户的权限进行更改：(一般使用数字表示)
	递归修改权限 chmod -R 目录名  改变一个目录所有文件的权限




chown 用户 目录文件  :改变文件目录的所有者
	添加一个用户：useradd 用户名
	如果没有用户不能用chown

chgrp 所有组 目录文件 ：改变文件的所有组
	添加一个所有组 ： groupadd 所有组

umask -S 显示新建文件的缺省权限
	
创建一个文件  ：不具有可执行权限
而目录的所有者具有可执行权限

     类型      文件                       目录
  
r   读权限     可以查看文件内容           可以列出目录中的内容
w   写权限     可以对文件的内容进行修改   可以对目录进行创建和删除文件
x   可执行     可执行文件                 可以进入目录

locate 搜索文件命令
当自己创建一个文件是  用locate + 文件名找不到时

updatedb
要对locate文件进行更新  updatedb 更新文件资料库 然后再找 
如果存在的文件在  /temp 临时文件下将找不到

locate -i 将文件名将对文件查找不区分大小写


which 搜素文件命令所在的绝对路径和命令的别名
whereis 查找命令所在的绝对路径及帮助文档路径

grep  对文件内容进行查找 grep 关键字  文件路径
	-i 不区分大小写
	-v 排除指定的字串  如  grep -v ^# 文件路径
	-n 输出行号 
	--color=auto "关键字" 文件路径     显示出关键字颜色 

find 找文件  find /目录 -name 文件名  *可以匹配任意字符   ？匹配单个字符
			-iname  不区分大小写


linux 系统中文件是数据块  一个数据块为  0.5k 1k为两个数据块
find / -size +204800  查找大于100Md的文件     - 为小于

find /etc -size +164800 -a -size -204800    查找在/etc下大雨 164800 小于204800的文件
	-a 为两个条件都满足的  可用于很多范围
		(如：find /etc -name init* -a -type d)  获取在etc目录下名为init开头的目录  
	-o 表示二者满足其一 的

-type 加属性（f 文件 d目录 l软链接文件）

find /home -user gallo  查找所有者为gallo的所有文件
	-user 所有组来查找
	-group 所属组来查找


根据问价属性查找 	
find /etc -cmin -5  在/etc下查找5分钟内被修改的文件 和目录

	amin  访问时间
	cmin  文件属性
	mmin  文件内容

find/etc -name init* -a -type f -exec ls -l {} \;
	-exec/ok 命令 {}\;d对搜索结果进行操作
		ok就是在-exec下询问执行

-inum  根据i节点来进行查找
man 查看命令或配置文件的信息
	--man ls 查看ls的帮助信息

whatis 读取命令简短的介信息    
apropos 配置文件的简短信息

--help 列出常见的选项

帮助命令  Shell内置的命令用which和whereis找不到路径

who命令  查找当前用户信息 
登录用户  登录终端  登录时间 （登录主机的ip）没有写就是本地
	   tty本地终端

w 查找当前用户的详细信息


压缩解压命令
gzip：压缩文件（只能压缩文件 不保留原文件）
gunzip：解压文件



tar 压缩目录
目录先打包后压缩    
	打包：tar -cvf a.tar a
	压缩：gzip a.tar 
打包压缩  -zcf
语法：
	-x 解包  /   -c打包
	-v显示详细信息
	-f制定解压文件
	-z解压缩

解包 -zxvf 

zip :
zip 压缩完的文件名   压缩的文件. 
zip -r 可以对目录进行压缩

unzip 解压缩

bzip2 gzip的升级版  
	bzip2 -k 文件名 (-k解压缩后可以保留原文件)
bunzip2 解压缩

tar -cjf 压缩后的文件  文件
tar =xj 解压缩目录








网络命令
write (给在线用户发信息) 用ctr+D保存   用户与用户之间 可以通过 who和w来观看那些是在线用户

wall （给所有用户发信息）

ping ：测试网络的连通性
	-c指定发送次数

ifconfig：网卡名称 IP地址
	查看和设置网络信息

mail 邮件命令 （查看邮件）
	mail 用户名  给用户发邮件

last 查看目前和过去用户的所有登陆信息

lastlog 最后一次登陆信息

lastlog -u 加上uid 只查看想看用户的信息 

traceroute 显示数据版到主机 的路径（包括访问每一个网站的返回时间）  

netstat 查询网络状态 
	-t 查看tcp
	-u 查看udp
	-l 监听
	-r 路由
	-n 显示ip地址和端口号
    #netstat -tlum    查看本机监听的端口	
    #netstat -an      产看本机所有网络连接
    #netstat -rn      查看本机路由表 

mount  挂载命令
	先创建挂载点：  mkdir /mnt/cdrom   mnt为挂载目录  cdrom自己创建
	实现挂载： mount -t iso9660 /dev/sr0 mnt/cdrom    /dev/sr0默认设备文件名   -t iso9660  mnt/cdrom挂载点

umount 删除挂载 挂载文件名  不能在光盘的挂载点卸载  

关机命令  sh	utdown
	-c取消前一个关机命令
	-h 关机	
	-r 重启
	
	rebot 重启
	init 6 重启

插入命令 a A i I（跳到行首并进入插入模式） o O
定位命令：set nu ,setnonu,gg,G,nG,:n,$,0
删除命令 x nx dd dG D :n1,n2d,p,P
复制剪切：yy,nyy,dd,ndd,p,P
取代和取消命令：r,R,u（返回上一步操作）
搜索，搜索替换：/string 搜索指定字符串 n  :%s/old/new/g  :n1,n2s/oldd/new/g  
/g（不可询问） /c(可询问)   

保存退出：
:w ，:W new_filename, :wq, ZZ, :q!,:wq!强制保存修改退出（文件所有者及root可使用）


导入命令执行结果  :r !命令

定义快捷键：map： 快捷键 触发命令 例按ctr+p注释一行    :map ^p I#<ESC> 

连续行注释
	n1,n2s/^/#/g 
减去注释 n1,n2s/^#//g

替换ab stringa stringb (打ab出来为stringb)

经常用到的命令 可以写在 所在用户的.vimrc 文件底下


rpm 安装  加包全名
选项：
	-i 安装
	-v 显示详细信息
	-h 哈希 显示进度
	--nodeps 不检测依赖性

rpm 卸载
选项：
	-e 卸载

更新   加包全名
	-U 升级
	可以用 -Uvh

查询
        -q 包名
	-aq 所有安装过的包
	-i 信息   -qi（查询已安装包的信息）
	-p 查询未安装包的信息  后面跟的是包全名 用法 rpm -qip 包全名




用户和用户管理配置：
用户信息文件：
	ll /etc/passwd
类型介绍：
	第1字段--用户名
	第2字段--密码标志   保存在  /etc/shadow
	第3字段--UID（UID）
		0：  超级用户
		1-499 系统用户 伪用户  （不能删）
		500以后  普通用户
	第4字段--GIU 用户组 
		初始组：用户登录就拥有的组
		附加组：用户可以加入其它多个用户组 
		**老婆与小三小四等**
	第5字段--用户的说明
	第6字段--家目录
		普通用户：/home/用户名/
		超级用户：/root/
	第7字段--登录之后的Shell

影子文件：
	/etc/shadow
	加密算法升级为SHA512散列加密算法  !!或*代表没有密码
	设置密码时间：从1970年时间戳开始加时间每过一天加一天
	字段介绍：
		第1字段--用户名
		第2字段--加密密码
		第3字段--密码最后一次修改时间  按时间戳
		第4字段--两次密码修改的间隔时间
		第5字段--密码有效时间（默认99999）
		第6字段--密码修改到期前的警告天数（和第5字段相比较）
		第7字段--密码到期时候的宽限字段
		第8字段--账号失效时间
		第9字段--保留


权限管理：
	文件系统属性chattr
		chattr[+-=][选项]文件或目录名
		    +：增加权限
		    -：删除权限
	    	    =: 赋予某权限
	i:如果对文件赋予i属性将不能对文件进行删除，改名，修改数据  相当于把文件锁起来（如果对目录设置i属性，只能修改目录下文件的数据，但不允许建立和删除文件）
	a:文件：给文件加a属性，那么只能在文件中增加数据，但是不能删除为不能修改数据；目录：如果对目录设置a属性，那么只允许目录中建立文件和修改文件（对文件名不能需修改），
		但是不允许删除
	lsattr 查看文件权限	
		-a 显示所有文件和目录
		-d 若目标是目录，仅列出目录本身的属性，而不是子文件

	系统目录权限 sudo
		root把本来只能超级用户执行的命令赋予普通用户执行
		操作的对象是系统命令
		普通用户在执行是  要先写sudo+绝对路径
		

shell基础

shell的功能
shell的分类

echo: 输出命令
	-e 用反斜线进行字符转换
输出不同的颜色 echo -e "\e[1;32m abcd \e[0m"  输出结果为  abcd绿色的前面啷个空格
程序用路径来执行


执行脚本  
	要想执行必须个权限
	赋予执行权限，直接运行
	    chmod 755 hello.sh
	    ./hello.sh  绝对路径
	通过Bash调用执行脚本
	    bash hello.sh  当前目录

Bash的基本功能
history :历史命令
	-c  清空历史记录


	-w  把缓存的历史命令写在历史命令保存文件

alias 
命名别名

Ctrl+C  强制终止当前命令
Ctrl+L 清屏
Ctrl+U 删除或剪切光标之前的命令
ctrl+Y 粘贴
ctrl+R 在历史命令中搜索
ctrl+D 退出终端

输出重定向
标准重定向
	命令>文件 以覆盖的方式，把命令的正确输出输出到指定的文件和设备当中
	命令>>文件 已追加的方式

标准错误输出重定向：
	错误命令 2>文件  覆盖
	错误命令 2>>文件 追加

正确输出和错误输出全部保存在文件中：
	命令>文件 2>&1  
	命令 &>文件	以覆盖的方式，把正确输出和错误输出都保存到同一文件中
	命令>>文件 2>&1  
	命令 &>>文件     追加，正确错误
	命令>>文件1 2>>文件2  把正确的追加在文件1中，把错我的追加在文件2中

输入重定向（用处少

）
       wc 选项 文件名
       -c   统计字节数
	-w  统计单词数
	-l  统计行号

管道符：
命令格式 命令1 | 命令2
命令1的正确输出作为命令2的操作对象   必须是正确的输出


通配符
？      匹配任意一个字符
*       匹配0个或任意字符，也就是可以匹配任意内容
[]      匹配括号中的任意一个字符
[-]     匹配括号中的任意一个字符，代表一个范围，例如：[a-z]代表匹配一个小写字母
[^]     逻辑非，代表匹配不是括号中的字符
''      单引号 在单引号中所有的特殊符号，都没有特殊意义
""      双引号。在上引号中特殊符号没有特殊含义，但是"$","`","\"是例外，拥有"调用变量的值"，"引用命令"和"转义符"
``      反引号，括起来的是系统命令，在Bash中会执行它。
$()     和反引号一样
#
$      用于调用变量的值
\      转意符  让特殊符号失去特殊含义变为普通字符

用户自定义变量
	变量调用   echo $name
	查看变量   set
	变量删除   unset name

环境变量：
	定义：用户自定义变量只在当前的Shell中生效，而环境变量会在当前Shell和这个Shelll的所有子Shell当中生效
	设置环境变量 ：
		export 变量名 = 赋值
		env 查看环境变量
.		unset name 变量删除
	系统常见的环境变量：
		PATH：系统查找命令的路径
		path="$path":/root/sh
		#path变量叠加

位置参数变量：
	定义一个变量：echo $0 $1 $2 定义三个变量
预定义变量：
	$？:最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果整个变量的值为非0，则证明上一个命令执行不正确
	$$:当前进程的进程号（PID）
	$!:后台运行的最后一个进程号（PID）	

接收键盘输入
    read[选项][变量名] 如-t 30   -p ""  -n "[n/p]" 
	-p "提示信息"： 在当代read输入时，输出提示信息
	-t 秒数：   read 命令会一直等待用户的输入，使用此选项可以指定等待时间
	-n 字符数   read 命令值接收指定的字符数，就会执行
	-s          隐藏输入的数据，适用于机密信息的输入
	只要写read就必须有 -p 和 -t
	

数值运算：
	declare声明变量类型
           declare[+/-][选项] 变量名
	   选项：
		-:    给变量设定类型属性
		+：   取消变量额类型属性
		-i:   将变量声明为整数型(integer)
		-x:   将变量声明为环境变量     == export 
		-p:   显示指定变量的被声明的类型	

		数值运算方法：
			一：declare -i 
			二：expr dd=$(expr $aa + $bb) 变量与加号之间要有空格
			三：cc=$(($aa+$bb)) 或 cc=$[$aa+$bb]

配置文件登录信息
	登陆前  etc/issue   只用于本地登录  配置 vi /etc/issue  
			进入配置  转义符只适用于issue文件
				-l 显示当前
				-d 显示当前系统日期
				-n 显示主机名
				-t 当前系统时间

	登录前 /etc/issue.net   用于远程登陆  配置 vi /etc/issue.net

	登陆后 /etc/motd 本地远程都是用于  但是是登陆后的环境信


正则表达：
	grep

	....
 	...
	...
	

	cut 命令：
		要求格式 必须是以tab键分割
		cut -f  表示定义字段
			提取指定字段
			cut -f 1 test.txt    提取文件中第一列的字段
			cut -f 2,3 test.txt     第二列和第三列的字段
		cut --complement 提取指定字段以外的lie
			cur -f 1 --complement   除第一列
		
		cut -d 指定分隔符
			cut -f 2 -d";" test.txt
		cut N- 从第N个（字节、字符、字段到结尾）
		    N-M  从N到M 包括M
		-M：从1到N
		-b  表示字节
		-c  表示字符
		-f  表示字段
			例：
			   cut -c 1-3 test.txt
		cut 的局限性：
			空格

printf :字符串截取命令（格式化输出）  列
	printf '%s' 输出字符串
	printf '%s %s %s'将会以这样的类型输出

awk '文件1{动作1}，文件2{文件2}'  截取命令
条件
	if
动作：
    格式化输出

awk 中可以使用print   列

	BEGIN ：在条件执行前先执行begin
	FS：FS内置变量，可以定义分隔符， 
	END：在所有命令执行完之后再执行end命令
	awk支持关系运算符：
		例子：awk '$6 >= 87 {printf $2 "\n"}  先判断条件在执行
		例子：
		打印出/eet/password 文件中 分隔符为：的字段
			错误例子：awk '{FS=":"}{print $1 "\t" $3}' /etc/password  你会发现打印出来的第一行没有被处理，所以应该加BEGIN
			正确写法：awk 'BEGIN{FS=":"}{print $1 "\t" $3}' /etc/password  
			应为AWK是先读入第一行后在执行，也就是说在指定分隔符之前第一行已经读入，所以你懂

sed命令：主要用来将数据进行选取，替换，删除，更新，增加的命令
	-n 一把sed命令是将所有数据输出到屏幕中，加入-n会把只经过sed命令处理的数据输出到屏幕中
	-i 直接修改读取的文件，而不是由屏幕输出
sort 文件名 排序
	-r 反向排序
	-f 忽略大小写
	-n 以数值类型进行排序，默认为字符串型进行排序
	-t 制定分隔符，默认是制表符

wc 统计命令
	-l 统计行数
	-w 统计单词数
	-m 只统计字符数

test 判断文件是否存在
	格式一：test -e 文件名称
	格式二：[-e 文件名]             两种方法通过 echo $? 来判断 如果输出0存在 如果是1不存在
	[-f 文件名]  判断文件是否存在并且是否是普通文件
	[-d 文件名]  判断文件是否存在并且是目录类型

if [空格条件空格]
	then
		执行语句
elif [条件判断2]
	then 
		执行语句
else 条件不成立
fi 结束语句


for 
